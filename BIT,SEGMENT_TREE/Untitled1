#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1e9 + 7;

struct SegmentTree {
    int n;
    vector<long long> tree, lazy_add, lazy_mul, lazy_set;
    vector<bool> is_lazy_set;

    SegmentTree(int size) : n(size) {
        tree.resize(4 * n, 0);
        lazy_add.resize(4 * n, 0);
        lazy_mul.resize(4 * n, 1);
        lazy_set.resize(4 * n, 0);
        is_lazy_set.resize(4 * n, false);
    }
    void push(int node, int start, int end) {
        if (is_lazy_set[node]) {
            tree[node] = lazy_set[node] * (end - start + 1) % MOD;
            if (start != end) {
                is_lazy_set[2 * node] = is_lazy_set[2 * node + 1] = true;
                lazy_set[2 * node] = lazy_set[2 * node + 1] = lazy_set[node];
                lazy_add[2 * node] = lazy_add[2 * node + 1] = 0;
                lazy_mul[2 * node] = lazy_mul[2 * node + 1] = 1;
            }
            lazy_set[node] = 0;
            is_lazy_set[node] = false;
        }

        if (lazy_mul[node] != 1 || lazy_add[node] != 0) {
            tree[node] = (tree[node] * lazy_mul[node] % MOD + lazy_add[node] * (end - start + 1) % MOD) % MOD;
            if (start != end) {
                lazy_mul[2 * node] = lazy_mul[2 * node] * lazy_mul[node] % MOD;
                lazy_mul[2 * node + 1] = lazy_mul[2 * node + 1] * lazy_mul[node] % MOD;

                lazy_add[2 * node] = (lazy_add[2 * node] * lazy_mul[node] % MOD + lazy_add[node]) % MOD;
                lazy_add[2 * node + 1] = (lazy_add[2 * node + 1] * lazy_mul[node] % MOD + lazy_add[node]) % MOD;
            }
            lazy_mul[node] = 1;
            lazy_add[node] = 0;
        }
    }
    void range_update(int node, int start, int end, int L, int R, long long add, long long mul) {
        push(node, start, end);

        if (start > R || end < L) return; // Ngoài đoạn

        if (start >= L && end <= R) { // Hoàn toàn trong đoạn
            lazy_mul[node] = mul;
            lazy_add[node] = add;
            push(node, start, end);
            return;
        }

        int mid = (start + end) / 2;
        range_update(2 * node, start, mid, L, R, add, mul);
        range_update(2 * node + 1, mid + 1, end, L, R, add, mul);

        tree[node] = (tree[2 * node] + tree[2 * node + 1]) % MOD;
    }

    // Hàm cập nhật đoạn (loại 3: gán giá trị)
    void range_set(int node, int start, int end, int L, int R, long long x) {
        push(node, start, end);

        if (start > R || end < L) return; // Ngoài đoạn

        if (start >= L && end <= R) { // Hoàn toàn trong đoạn
            is_lazy_set[node] = true;
            lazy_set[node] = x;
            push(node, start, end);
            return;
        }

        int mid = (start + end) / 2;
        range_set(2 * node, start, mid, L, R, x);
        range_set(2 * node + 1, mid + 1, end, L, R, x);

        tree[node] = (tree[2 * node] + tree[2 * node + 1]) % MOD;
    }
    long long range_query(int node, int start, int end, int L, int R) {
        push(node, start, end);

        if (start > R || end < L) return 0; // Ngoài đoạn

        if (start >= L && end <= R) return tree[node]; // Hoàn toàn trong đoạn

        int mid = (start + end) / 2;
        long long left_sum = range_query(2 * node, start, mid, L, R);
        long long right_sum = range_query(2 * node + 1, mid + 1, end, L, R);

        return (left_sum + right_sum) % MOD;
    }
    void range_update(int L, int R, long long add, long long mul) {
        range_update(1, 1, n, L, R, add, mul);
    }

    void range_set(int L, int R, long long x) {
        range_set(1, 1, n, L, R, x);
    }
    long long range_query(int L, int R) {
        return range_query(1, 1, n, L, R);
    }
};

int main() {
    int n, m;
    cin >> n >> m;

    vector<int> arr(n + 1);
    for (int i = 1; i <= n; ++i) cin >> arr[i];

    SegmentTree segTree(n);
    for (int i = 1; i <= n; ++i) {
        segTree.range_update(i, i, arr[i], 1);
    }
    while (m--) {
        int type, L, R;
        cin >> type >> L >> R;

        if (type == 1) {
            long long z;
            cin >> z;
            segTree.range_update(L, R, z, 1);
        } else if (type == 2) {
            long long z;
            cin >> z;
            segTree.range_update(L, R, 0, z);
        } else if (type == 3) {
            long long z;
            cin >> z;
            segTree.range_set(L, R, z);
        } else if (type == 4) {
            cout << segTree.range_query(L, R) << endl;
        }
    }

    return 0;
}
